name: Paper Trading Simulation

on:
  schedule:
    # Run after daily VCP screening at 7:30 PM ET (11:30 PM UTC)
    - cron: '30 23 * * 1-5'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      mode:
        description: 'Trading mode (single, report)'
        required: false
        default: 'single'
        type: choice
        options:
          - 'single'
          - 'report'
      reset_portfolio:
        description: 'Reset paper portfolio (start fresh)'
        required: false
        default: 'false'
        type: boolean

jobs:
  paper-trading:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download previous paper trading state
      continue-on-error: true
      run: |
        echo "📥 Restoring paper trading state..."

                # Try to restore from previous workflow artifacts
                # In practice, you might use a more persistent storage solution
                # For now, we'll start fresh each time or use committed state files

        echo "ℹ️ Starting with fresh paper trading state"
        echo "💰 Initial capital: $100,000"

    - name: Reset portfolio (if requested)
      if: github.event.inputs.reset_portfolio == 'true'
      run: |
        echo "🔄 Resetting paper portfolio..."
        rm -f paper_portfolio.json paper_watchlist.json paper_alerts.json
        echo "✅ Portfolio reset complete"

    - name: Run paper trading simulation
      env:
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "📈 PAPER TRADING SIMULATION"
        echo "==========================="

        # Determine run mode
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "⏰ Scheduled daily paper trading"
          MODE="single"
        else
          echo "🔧 Manual paper trading run"
          MODE="${{ github.event.inputs.mode }}"
        fi

        echo "🎯 Mode: $MODE"
        echo "📅 Date: $(date '+%Y-%m-%d %H:%M ET')"

        # Check if VCP candidates file exists (from daily screening)
        if [ -f "daily_reports/vcp_monitoring_candidates.json" ]; then
          CANDIDATES_COUNT=$(jq '.total_count // 0' daily_reports/vcp_monitoring_candidates.json 2>/dev/null || echo "0")
          echo "📊 VCP candidates available: $CANDIDATES_COUNT"
        else
          echo "⚠️ No VCP candidates file found"
          echo "ℹ️ Paper trading will use existing watchlist only"
        fi

        # Run paper trading
        if [ "$MODE" = "report" ]; then
          echo "📋 Generating performance report..."
          python3 paper_trader.py --mode single --report --verbose
        else
          echo "🔄 Running trading cycle..."
          timeout 600 python3 paper_trader.py --mode single --verbose || {
            echo "⚠️ Paper trading timed out or failed"
            exit 1
          }
        fi

        echo "✅ Paper trading simulation completed"

    - name: Analyze paper trading results
      run: |
        echo "📊 PAPER TRADING ANALYSIS"
        echo "========================"

        # Check if portfolio state file exists
        if [ -f "paper_portfolio.json" ]; then
          echo "💼 Portfolio state found"

          # Run portfolio analysis script
          python3 scripts/analyze_portfolio.py
        else
          echo "⚠️ No portfolio state file found"
        fi

        # Check watchlist
        if [ -f "paper_watchlist.json" ]; then
          WATCHLIST_SIZE=$(jq 'length' paper_watchlist.json 2>/dev/null || echo "0")
          echo "👀 Watchlist size: $WATCHLIST_SIZE symbols"
        fi

        # Check for log file
        if [ -f "paper_trading.log" ]; then
          echo ""
          echo "📝 Recent log entries:"
          tail -10 paper_trading.log
        fi

    - name: Send paper trading summary
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        python3 scripts/send_telegram.py

    - name: Save paper trading state
      run: |
        echo "💾 Saving paper trading state..."

        # Create state archive
        mkdir -p paper_trading_state
        cp paper_portfolio.json paper_trading_state/ 2>/dev/null || echo "No portfolio file"
        cp paper_watchlist.json paper_trading_state/ 2>/dev/null || echo "No watchlist file"
        cp paper_alerts.json paper_trading_state/ 2>/dev/null || echo "No alerts file"
        cp paper_trading.log paper_trading_state/ 2>/dev/null || echo "No log file"

        # Create state summary
        echo "Paper Trading State - $(date)" > paper_trading_state/README.md
        echo "Generated by GitHub Actions" >> paper_trading_state/README.md

        echo "✅ State archived"

    - name: Upload paper trading artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: paper-trading-state-${{ github.run_number }}
        path: |
          paper_trading_state/
          paper_*.json
          paper_*.log
          paper_trading_report_*.json
        retention-days: 7

    - name: Commit paper trading results (scheduled runs only)
      if: github.event_name == 'schedule' && success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Create daily results directory
        DATE_DIR="paper_trading/$(date +%Y/%m)"
        mkdir -p "$DATE_DIR"

        # Copy state files if they exist
        cp paper_portfolio.json "$DATE_DIR/portfolio_$(date +%Y%m%d).json" 2>/dev/null || true
        cp paper_watchlist.json "$DATE_DIR/watchlist_$(date +%Y%m%d).json" 2>/dev/null || true

        # Create daily summary
        if [ -f "paper_portfolio.json" ]; then
          echo "Daily Paper Trading State - $(date)" > "$DATE_DIR/summary_$(date +%Y%m%d).md"
          echo "Portfolio saved: $(date '+%Y-%m-%d %H:%M ET')" >> "$DATE_DIR/summary_$(date +%Y%m%d).md"
        fi

        # Commit if there are changes
        git add paper_trading/ 2>/dev/null || true

        if git diff --staged --quiet; then
          echo "No paper trading changes to commit"
        else
          git commit -m "Paper trading state - $(date +%Y-%m-%d)

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
          echo "✅ Paper trading state committed"
        fi

    - name: Daily summary
      if: always()
      run: |
        echo ""
        echo "📋 PAPER TRADING SUMMARY"
        echo "======================="

        if [ -f "paper_portfolio.json" ]; then
          echo "✅ Paper trading simulation completed"
          echo "💾 Portfolio state saved"
          echo "📱 Telegram summary sent"

          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "📂 State committed to repository"
          fi
        else
          echo "⚠️ Paper trading simulation had issues"
          echo "🔍 Check logs for details"
        fi

        echo ""
        echo "🔗 Next paper trading run: Tomorrow at 7:30 PM ET"
