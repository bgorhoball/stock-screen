name: Test VCP Screening

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-screening:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-dev libxslt-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Test ticker fetching with fallback handling
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from ticker_fetcher import SP500TickerFetcher
        import logging

        # Enable detailed logging for debugging
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger()

        fetcher = SP500TickerFetcher()
        tickers = fetcher.get_sp500_tickers()

        print(f'Fetched {len(tickers)} tickers')
        print(f'First 10 tickers: {tickers[:10]}')

        # More flexible assertion - accept either full list or static fallback
        if len(tickers) >= 400:
            print('✅ Successfully fetched full S&P 500 ticker list')
        elif len(tickers) >= 100:
            print('⚠️ Using fallback ticker list (acceptable for testing)')
        else:
            raise AssertionError(f'Too few tickers: {len(tickers)}. Expected at least 100.')

        # Verify tickers are valid symbols
        valid_tickers = [t for t in tickers if t and len(t) <= 10 and t.replace('-', '').replace('.', '').isalpha()]
        print(f'Valid ticker symbols: {len(valid_tickers)}/{len(tickers)}')

        assert len(valid_tickers) == len(tickers), 'All tickers should be valid symbols'
        print('✅ All ticker symbols are valid')
        "

    - name: Test data fetching with sample symbols
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from data_fetcher import DataFetcher
        import logging

        logging.basicConfig(level=logging.INFO)

        fetcher = DataFetcher()
        test_symbols = ['AAPL', 'MSFT', 'GOOGL']
        print(f'Testing data fetching for: {test_symbols}')

        data = fetcher.fetch_multiple_stocks(test_symbols, weeks=4)
        print(f'Fetched data for {len(data)} symbols')

        # Show sample data for debugging
        for symbol, df in data.items():
            if not df.empty:
                print(f'{symbol}: {len(df)} days, latest close: \${df[\"close\"].iloc[-1]:.2f}')
            else:
                print(f'{symbol}: No data retrieved')

        assert len(data) > 0, 'Should fetch data for at least one symbol'
        print('✅ Data fetching test passed')
        "

    - name: Test VCP detection
      run: |
        python src/vcp_detector.py

    - name: Test full screening with limited symbols
      env:
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "Running VCP screening test with 10 symbols..."
        python vcp_screen.py --max-symbols 10 --verbose

        echo "Checking if reports were generated..."
        ls -la daily_reports/ || echo "No daily_reports directory found"

        if [ -d "daily_reports" ]; then
          echo "Report files created:"
          find daily_reports/ -name "*.csv" -o -name "*.json" | head -5
        fi

    - name: Verify output files
      run: |
        ls -la daily_reports/
        # Check that CSV and JSON files were created
        find daily_reports/ -name "*.csv" -o -name "*.json" | head -5