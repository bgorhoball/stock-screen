name: Weekly VCP Strategy Backtest

on:
  schedule:
    # Run every Sunday at 6:00 PM ET (10:00 PM UTC)
    - cron: '0 22 * * 0'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      symbols_source:
        description: 'Symbol source (sp500, top100, vcp_candidates)'
        required: false
        default: 'vcp_candidates'
      max_symbols:
        description: 'Maximum symbols to test (leave empty for all)'
        required: false
        default: ''
      backtest_period:
        description: 'Backtest period in years'
        required: false
        default: '2'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '5'
      min_confidence:
        description: 'Minimum VCP confidence threshold'
        required: false
        default: '0.8'

jobs:
  weekly-backtest:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create reports directory
      run: mkdir -p backtest_reports

    - name: Run VCP strategy backtest
      env:
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "🚀 WEEKLY VCP STRATEGY BACKTEST"
        echo "================================"

        # Determine run parameters
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "📅 Scheduled weekly backtest"
          SYMBOLS_SOURCE="vcp_candidates"
          MAX_SYMBOLS=""
          BACKTEST_YEARS="2"
          MIN_CONFIDENCE="0.8"
        else
          echo "🔧 Manual backtest run"
          SYMBOLS_SOURCE="${{ github.event.inputs.symbols_source }}"
          MAX_SYMBOLS="${{ github.event.inputs.max_symbols }}"
          BACKTEST_YEARS="${{ github.event.inputs.backtest_period }}"
          MIN_CONFIDENCE="${{ github.event.inputs.min_confidence }}"
        fi

        # Calculate date range
        END_DATE=$(date +%Y-%m-%d)
        START_DATE=$(date -d "${BACKTEST_YEARS} years ago" +%Y-%m-%d)

        echo "📊 Backtest Configuration:"
        echo "  Symbols: $SYMBOLS_SOURCE"
        echo "  Period: $START_DATE to $END_DATE ($BACKTEST_YEARS years)"
        echo "  Min Confidence: $MIN_CONFIDENCE"
        if [ -n "$MAX_SYMBOLS" ]; then
          echo "  Max Symbols: $MAX_SYMBOLS"
        fi

        # Build command arguments
        BACKTEST_ARGS="--symbols $SYMBOLS_SOURCE --start-date $START_DATE --end-date $END_DATE"
        BACKTEST_ARGS="$BACKTEST_ARGS --min-confidence $MIN_CONFIDENCE --reports-dir backtest_reports"

        if [ -n "$MAX_SYMBOLS" ]; then
          BACKTEST_ARGS="$BACKTEST_ARGS --max-symbols $MAX_SYMBOLS"
        fi

        echo "🎯 Running backtest..."
        echo "Command: python3 run_backtest.py $BACKTEST_ARGS"

        # Run backtest with timeout
        timeout 3600 python3 run_backtest.py $BACKTEST_ARGS --verbose || {
          echo "⚠️ Backtest timed out or failed"
          exit 1
        }

    - name: Process backtest results
      run: |
        echo "📋 BACKTEST RESULTS SUMMARY"
        echo "=========================="

        # Check if reports were generated
        if ls backtest_reports/*.html 1> /dev/null 2>&1; then
          REPORT_COUNT=$(ls backtest_reports/*.html | wc -l)
          echo "✅ Generated $REPORT_COUNT HTML reports"

          # List generated files
          echo "📄 Generated files:"
          ls -la backtest_reports/
        else
          echo "❌ No HTML reports found"
          exit 1
        fi

        # Extract key metrics from log (basic parsing)
        if [ -f backtest.log ]; then
          echo ""
          echo "📊 Key Metrics (from log):"

          # Extract performance metrics
          grep -E "(Total Return|Annual Return|Win Rate|Sharpe Ratio|Max Drawdown)" backtest.log | tail -5 || echo "Metrics not found in log"

          echo ""
          echo "🎯 Backtest Status:"
          if grep -q "Backtesting completed successfully" backtest.log; then
            echo "✅ Backtest completed successfully"
          else
            echo "⚠️ Backtest may have had issues"
          fi
        fi

    - name: Send Telegram notification
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        python3 << 'EOF'
        import sys
        sys.path.append('src')
        from telegram_bot import TelegramBot
        import os
        from datetime import datetime
        import glob

        bot = TelegramBot()
        if not bot.enabled:
            print('Telegram bot not configured')
            exit(0)

        # Create backtest summary message
        message = '📊 Weekly VCP Strategy Backtest\\n'
        message += f'Date: {datetime.now().strftime(\"%Y-%m-%d %H:%M UTC\")}\\n\\n'

        # Check for results
        html_reports = glob.glob('backtest_reports/*.html')

        if html_reports:
            message += f'✅ Backtest completed successfully\\n'
            message += f'📄 Generated {len(html_reports)} reports\\n\\n'

            # Try to extract basic metrics from log
            try:
                with open('backtest.log', 'r') as f:
                    log_content = f.read()

                # Look for key metrics in log
                lines = log_content.split('\\n')
                metrics_found = False

                for line in lines:
                    if 'Total Return:' in line:
                        message += f'📈 {line.strip()}\\n'
                        metrics_found = True
                    elif 'Win Rate:' in line:
                        message += f'🎯 {line.strip()}\\n'
                        metrics_found = True
                    elif 'Sharpe Ratio:' in line:
                        message += f'📊 {line.strip()}\\n'
                        metrics_found = True

                if not metrics_found:
                    message += '📋 Detailed metrics available in reports\\n'

            except Exception as e:
                message += f'⚠️ Could not extract metrics: {e}\\n'
        else:
            message += '❌ Backtest failed - no reports generated\\n'

        message += '\\n🔗 Check GitHub Actions for detailed results'

        try:
            success = bot.send_message(message)
            print(f'Telegram notification sent: {success}')
        except Exception as e:
            print(f'Error sending Telegram notification: {e}')
        EOF

    - name: Upload backtest artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: weekly-backtest-results-${{ github.run_number }}
        path: |
          backtest_reports/
          backtest.log
          paper_trading.log
        retention-days: 30

    - name: Commit weekly results (scheduled runs only)
      if: github.event_name == 'schedule'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Create weekly results directory
        WEEK_DIR="weekly_backtests/$(date +%Y)/week_$(date +%U)"
        mkdir -p "$WEEK_DIR"

        # Copy latest results
        if ls backtest_reports/*.html 1> /dev/null 2>&1; then
          cp backtest_reports/*.html "$WEEK_DIR/"
          cp backtest_reports/*.json "$WEEK_DIR/" 2>/dev/null || true
          cp backtest.log "$WEEK_DIR/" 2>/dev/null || true

          # Create summary file
          echo "Weekly VCP Strategy Backtest Results" > "$WEEK_DIR/README.md"
          echo "Generated: $(date)" >> "$WEEK_DIR/README.md"
          echo "" >> "$WEEK_DIR/README.md"
          echo "Files:" >> "$WEEK_DIR/README.md"
          ls -la "$WEEK_DIR/" | grep -v "^total" | tail -n +2 >> "$WEEK_DIR/README.md"

          # Commit results
          git add "$WEEK_DIR/"

          if git diff --staged --quiet; then
            echo "No new results to commit"
          else
            git commit -m "Weekly VCP backtest results - $(date +%Y-%m-%d)

            🤖 Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
            echo "✅ Weekly results committed to repository"
          fi
        else
          echo "⚠️ No backtest results to commit"
        fi

    - name: Cleanup old artifacts
      if: github.event_name == 'schedule'
      run: |
        # Keep only last 4 weeks of results (28 days)
        find weekly_backtests/ -type d -name "week_*" -mtime +28 -exec rm -rf {} + 2>/dev/null || true
        echo "✅ Cleaned up old backtest results"

    - name: Weekly summary
      if: always()
      run: |
        echo ""
        echo "📋 WEEKLY BACKTEST SUMMARY"
        echo "========================="

        if ls backtest_reports/*.html 1> /dev/null 2>&1; then
          echo "✅ Backtest completed successfully"
          echo "📊 Strategy validation complete"
          echo "📱 Telegram notification sent"
          echo "💾 Results archived for 30 days"

          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "📂 Results committed to repository"
          fi
        else
          echo "❌ Backtest failed"
          echo "🔍 Check logs for details"
        fi

        echo ""
        echo "🔗 Next weekly backtest: $(date -d 'next Sunday 22:00 UTC' '+%Y-%m-%d %H:%M UTC')"